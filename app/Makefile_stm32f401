
# Be silent per default, but 'make V=1' will show all compiler calls.
ifneq ($(V),1)
Q		:= @
NULL		:= 2>/dev/null
endif

SRC_DIR        = src
INC_DIR        = inc
OPENCM3_DIR    = ../libopencm3
SHARED_SRC_DIR = ../shared/src
SHARED_INC_DIR = ../shared/inc

BINARY = firmware

###############################################################################
# Basic Device Setup

LIBNAME			= opencm3_stm32f4
DEFS				+= -DSTM32F4
FP_FLAGS		?= -mfloat-abi=hard -mfpu=fpv4-sp-d16
ARCH_FLAGS	= -fno-use-cxa-atexit -specs=nano.specs -mthumb -mcpu=cortex-m4 $(FP_FLAGS)
#ARCH_FLAGS	+= -DBLACKPILLF411
ARCH_FLAGS	+= -DNUCLEOF401RE

###############################################################################
# Linkerscript

LDSCRIPT = stm32f401.ld
LDLIBS		+= -l$(LIBNAME)
LDFLAGS		+= -L$(OPENCM3_DIR)/lib

###############################################################################
# Includes

DEFS		+= -I$(INC_DIR)
DEFS		+= -I$(SHARED_INC_DIR)
DEFS		+= -I$(OPENCM3_DIR)/include

###############################################################################
# Executables

PREFIX		?= arm-none-eabi-

CC		:= $(PREFIX)gcc
CXX		:= $(PREFIX)g++
LD		:= $(PREFIX)g++
AR		:= $(PREFIX)ar
AS		:= $(PREFIX)as
OBJCOPY		:= $(PREFIX)objcopy
OBJDUMP		:= $(PREFIX)objdump
GDB		:= $(PREFIX)gdb
STFLASH		= $(shell which st-flash)
OPT_RELEASE	:= -Os
OPT_DEBUG	:= -Og
DBG		:= -ggdb3
CSTD		?= -std=c99
CXXSTD		?= -std=c++17


###############################################################################
# Source files

OBJS		+= $(SRC_DIR)/$(BINARY).o
#OBJS		+= $(SRC_DIR)/bootloader.o
OBJS		+= $(SHARED_SRC_DIR)/core/system.o
OBJS		+= $(SHARED_SRC_DIR)/core/uart.o
OBJS		+= $(SHARED_SRC_DIR)/core/ring-buffer.o
OBJS		+= $(SHARED_SRC_DIR)/core/SysTick.o
OBJS		+= $(SHARED_SRC_DIR)/core/InterruptManager.o
OBJS		+= $(SRC_DIR)/timer.o

###############################################################################
ifeq ($(RELEASE),1)
# C flags
TGT_CFLAGS += $(OPT_RELEASE) $(CSTD)
TGT_CFLAGS += $(ARCH_FLAGS)
TGT_CFLAGS += -Wextra -Wshadow -Wimplicit-function-declaration
TGT_CFLAGS += -Wredundant-decls -Wmissing-prototypes -Wstrict-prototypes
TGT_CFLAGS += -fno-common -ffunction-sections -fdata-sections

# C++ flags
TGT_CXXFLAGS += $(OPT_RELEASE) $(CXXSTD)
TGT_CXXFLAGS += $(ARCH_FLAGS)
TGT_CXXFLAGS += -Wextra -Wshadow -Wredundant-decls  -Weffc++
TGT_CXXFLAGS += -fno-common -ffunction-sections -fdata-sections -fno-exceptions
else
# C flags
TGT_CFLAGS += $(OPT_DEBUG) $(CSTD) $(DBG)
TGT_CFLAGS += $(ARCH_FLAGS)
TGT_CFLAGS += -Wextra -Wshadow -Wimplicit-function-declaration
TGT_CFLAGS += -Wredundant-decls -Wmissing-prototypes -Wstrict-prototypes
TGT_CFLAGS += -fno-common -ffunction-sections -fdata-sections

# C++ flags
TGT_CXXFLAGS += $(OPT_DEBUG) $(CXXSTD) $(DBG)
TGT_CXXFLAGS += $(ARCH_FLAGS)
TGT_CXXFLAGS += -Wextra -Wshadow -Wredundant-decls  -Weffc++
TGT_CXXFLAGS += -fno-common -ffunction-sections -fdata-sections -fno-exceptions
endif

###############################################################################
# C & C++ preprocessor common flags

TGT_CPPFLAGS	+= -MD
TGT_CPPFLAGS	+= -Wall -Wundef
TGT_CPPFLAGS	+= $(DEFS)

###############################################################################
# Linker flags

TGT_LDFLAGS		+= --static -nostartfiles
TGT_LDFLAGS		+= -T$(LDSCRIPT)
ifeq ($(RELEASE),1)
TGT_LDFLAGS		+= $(ARCH_FLAGS)
else
TGT_LDFLAGS		+= $(ARCH_FLAGS) $(DBG)
endif
TGT_LDFLAGS		+= -Wl,-Map=$(*).map -Wl,--cref
TGT_LDFLAGS		+= -Wl,--gc-sections

#TODO is there a way to fix this rather than
# ignoring it? I don't think it's an issue in my
# case, but it represents some executable code on the
# stack, which is theoretically a security vuln.
# Issue is InterruptManager::handler functions
TGT_LDFLAGS     += -Wl,--no-warn-rwx-segment
ifeq ($(V),99)
TGT_LDFLAGS		+= -Wl,--print-gc-sections
endif

###############################################################################
# Used libraries

#LDLIBS		+= -Wl,--start-group -lc -lgcc -lnosys -Wl,--end-group

# when compiling with g++, don't use -lnosys. The linker can't find write_r()?
LDLIBS		+= -Wl,--start-group  -lgcc -Wl,--end-group -lnosys -specs=nosys.specs

###############################################################################
###############################################################################
###############################################################################

.SUFFIXES: .elf .bin .hex .srec .list .map .images
.SECONDEXPANSION:
.SECONDARY:

all: elf bin

elf: $(BINARY).elf
bin: $(BINARY).bin
hex: $(BINARY).hex
srec: $(BINARY).srec
list: $(BINARY).list
GENERATED_BINARIES=$(BINARY).elf $(BINARY).bin $(BINARY).hex $(BINARY).srec $(BINARY).list $(BINARY).map

images: $(BINARY).images
flash: $(BINARY).flash

$(OPENCM3_DIR)/lib/lib$(LIBNAME).a:
ifeq (,$(wildcard $@))
	$(warning $(LIBNAME).a not found, attempting to rebuild in $(OPENCM3_DIR))
	$(MAKE) -C $(OPENCM3_DIR)
endif

# Define a helper macro for debugging make errors online
# you can type "make print-OPENCM3_DIR" and it will show you
# how that ended up being resolved by all of the included
# makefiles.
print-%:
	@echo $*=$($*)

%.images: %.bin %.hex %.srec %.list %.map
	@#printf "*** $* images generated ***\n"

%.bin: %.elf
	@#printf "  OBJCOPY $(*).bin\n"
	$(Q)$(OBJCOPY) -Obinary $(*).elf $(*).bin

%.hex: %.elf
	@#printf "  OBJCOPY $(*).hex\n"
	$(Q)$(OBJCOPY) -Oihex $(*).elf $(*).hex

%.srec: %.elf
	@#printf "  OBJCOPY $(*).srec\n"
	$(Q)$(OBJCOPY) -Osrec $(*).elf $(*).srec

%.list: %.elf
	@#printf "  OBJDUMP $(*).list\n"
	$(Q)$(OBJDUMP) -S $(*).elf > $(*).list

%.elf %.map: $(OBJS) $(LDSCRIPT) $(OPENCM3_DIR)/lib/lib$(LIBNAME).a Makefile
	@#printf "  LD      $(*).elf\n"
	$(Q)$(LD) $(TGT_LDFLAGS) $(LDFLAGS) $(OBJS) $(LDLIBS) -o $(*).elf

%.o: %.c
	@#printf "  CC      $(*).c\n"
	$(Q)$(CC) $(TGT_CFLAGS) $(CFLAGS) $(TGT_CPPFLAGS) $(CPPFLAGS) -o $(*).o -c $(*).c

%.o: %.S
	@#printf "  CC      $(*).S\n"
	$(Q)$(CC) $(TGT_CFLAGS) $(CFLAGS) -o $(*).o -c $(*).S

%.o: %.cxx
	@#printf "  CXX     $(*).cxx\n"
	$(Q)$(CXX) $(TGT_CXXFLAGS) $(CXXFLAGS) $(TGT_CPPFLAGS) $(CPPFLAGS) -o $(*).o -c $(*).cxx

%.o: %.cpp
	@#printf "  CXX     $(*).cpp\n"
	$(Q)$(CXX) $(TGT_CXXFLAGS) $(CXXFLAGS) $(TGT_CPPFLAGS) $(CPPFLAGS) -o $(*).o -c $(*).cpp

clean:
	@#printf "  CLEAN\n"
	$(Q)$(RM) $(GENERATED_BINARIES) generated.* $(OBJS) $(OBJS:%.o=%.d)


.PHONY: images clean elf bin hex srec list

-include $(OBJS:.o=.d)
